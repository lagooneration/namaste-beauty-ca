"use client"
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: DianaV.Mendoza (https://sketchfab.com/DianaV.Mendoza)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/makeup-cosmetics-97038c2b5b7d44b1851ba9e33fbd20d7
Title: Makeup & Cosmetics
*/

import * as THREE from 'three'
import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import gsap from 'gsap'
import { GLTF } from "three-stdlib";

type ModelProps = {
  position?: THREE.Vector3;
  material?: THREE.MeshStandardMaterial;
  constantWheelSpin?: boolean;
};

type GLTFResult = GLTF & {
  nodes: {
    pCylinder13_Black_0: THREE.Mesh;
    pCylinder13_blinn5_0: THREE.Mesh;
    pCylinder13_Iron_0: THREE.Mesh;
    pCylinder13_lambert1_0: THREE.Mesh;
    pCylinder13_Wood_0: THREE.Mesh;
    pCylinder13_Blush_0: THREE.Mesh;
    pCylinder13_Crystal_0: THREE.Mesh;
  }
  materials: {
    Black: THREE.MeshStandardMaterial;
    blinn5: THREE.MeshStandardMaterial;
    Iron: THREE.MeshStandardMaterial;
    lambert1: THREE.MeshStandardMaterial;
    Wood: THREE.MeshStandardMaterial;
    Blush: THREE.MeshStandardMaterial;
    Crystal: THREE.MeshStandardMaterial;
  };
};

export function Model(props: ModelProps) {
  const groupRef = useRef<THREE.Group>(null);
  const gltf = useGLTF("/makeup.gltf");
  // Cast to unknown first, then to GLTFResult to avoid type errors
  const { nodes, materials } = gltf as unknown as GLTFResult;

  // Add fade-in animation on mount
  useEffect(() => {
    if (!groupRef.current) return;
    
    gsap.from(groupRef.current.position, {
      y: -2,
      duration: 1.5,
      ease: "power3.out"
    });
    
    // Check if material exists before animating
    if (props.material) {
      gsap.from(props.material, {
        opacity: 0,
        duration: 1.5,
        ease: "power3.out"
      });
    }
  }, [props.material]);

  return (
    <group ref={groupRef} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pCylinder13_Black_0.geometry}
        material={materials.Black}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pCylinder13_blinn5_0.geometry}
        material={materials.blinn5}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pCylinder13_Iron_0.geometry}
        material={materials.Iron}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pCylinder13_lambert1_0.geometry}
        material={materials.lambert1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pCylinder13_Wood_0.geometry}
        material={materials.Wood}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pCylinder13_Blush_0.geometry}
        material={materials.Blush}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.pCylinder13_Crystal_0.geometry}
        material={materials.Crystal}
      />
    </group>
  )
}

useGLTF.preload('/makeup.gltf')